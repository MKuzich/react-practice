{"version":3,"file":"static/js/545.7bb95778.chunk.js","mappings":"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","sources":["services/weatherApi.ts","pages/Weather/CurrentWeather.styled.tsx","pages/Weather/CurrentWeather.tsx","pages/Weather/ForecastWeather.styled.tsx","pages/Weather/ForecastWeather.tsx","pages/Weather/Weather.tsx"],"sourcesContent":["import axios from 'axios';\nimport { IResponse } from '../types/weather';\n\nexport const getCurrentWeather = async (\n  city: string\n): Promise<IResponse | never> => {\n  const searchCityParams = new URLSearchParams({\n    appid: '7c0ca10b6b7d582c36f6c73564f8fbab',\n    q: city,\n  });\n  const CITY_URL = `http://api.openweathermap.org/geo/1.0/direct?${searchCityParams}`;\n\n  try {\n    const res: { data: { lat: number; lon: number }[] } = await axios.get(\n      CITY_URL\n    );\n    if (res.data.length === 0) {\n      throw new Error('Any cities on this request!');\n    }\n    const location = res.data[0];\n    const lat = location.lat.toString();\n    const lon = location.lon.toString();\n\n    const searchWeatherParams = new URLSearchParams({\n      appid: '7c0ca10b6b7d582c36f6c73564f8fbab',\n      lat,\n      lon,\n      units: 'metric',\n    });\n    const WEATHER_URL = `https://api.openweathermap.org/data/2.5/weather?${searchWeatherParams}`;\n    const currentData = await axios.get(WEATHER_URL);\n    const currentWeather = currentData.data;\n\n    const FORECAST_URL = `https://api.openweathermap.org/data/2.5/forecast?${searchWeatherParams}`;\n    const forecastData = await axios.get(FORECAST_URL);\n    const forecastWeather = forecastData.data;\n\n    return { currentWeather, forecastWeather };\n  } catch (error: any) {\n    return error.message;\n  }\n};\n","import styled from 'styled-components';\n\nexport const Temp = styled.span`\n  font-size: 40px;\n  line-height: 1;\n  margin-right: 16px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { IWeather } from '../../types/weather';\nimport { Stack, Card } from 'react-bootstrap';\nimport { Temp } from './CurrentWeather.styled';\nimport {\n  WiDirectionDownLeft,\n  WiDirectionDownRight,\n  WiDirectionDown,\n  WiDirectionLeft,\n  WiDirectionRight,\n  WiDirectionUpLeft,\n  WiDirectionUpRight,\n  WiDirectionUp,\n  WiHumidity,\n  WiCloudy,\n  WiBarometer,\n} from 'react-icons/wi';\nimport { FiWind } from 'react-icons/fi';\n\ninterface IProps {\n  data: IWeather;\n}\nexport const CurrentWeather: React.FC<IProps> = ({ data }) => {\n  const [date, setDate] = useState<string>();\n  const { name, sys, weather, main, wind, clouds, dt } = data;\n\n  useEffect(() => {\n    const currentDate = new Date(dt * 1000);\n    setDate(currentDate.toLocaleTimeString());\n  }, [dt]);\n  return (\n    <div>\n      <Card bg=\"info\" className=\"d-inline-block secondary\">\n        <Card.Header>Current weather at your city</Card.Header>\n        <Stack\n          className=\"p-3 border border-dark rounded-3 border-opacity-75\"\n          direction=\"horizontal\"\n          gap={4}\n        >\n          <Card bg=\"info\" border=\"info\">\n            <Stack direction=\"horizontal\" gap={2}>\n              <div>\n                <Card.Title>\n                  {name}, {sys.country}\n                </Card.Title>\n                <Card.Text>{date}</Card.Text>\n              </div>\n              <Temp>{main.temp}&#176;C</Temp>\n            </Stack>\n\n            <div className=\"d-flex justify-content-center\">\n              <img\n                src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n                alt={weather[0].main}\n              />\n            </div>\n            <p className=\"text-center\">{weather[0].description}</p>\n          </Card>\n          <Card bg=\"dark\" text=\"white\" className=\"px-3 py-2\">\n            <Card.Header>Feels like {main.feels_like}&#176;C</Card.Header>\n            <Card.Text>\n              <FiWind size=\"24px\" /> {wind.speed} m/s{'  '}\n              {(wind.deg > 337.5 || wind.deg <= 22.5) && (\n                <WiDirectionUp size=\"24px\" />\n              )}\n              {wind.deg > 22.5 && wind.deg <= 67.5 && (\n                <WiDirectionUpRight size=\"24px\" />\n              )}\n              {wind.deg > 67.5 && wind.deg <= 112.5 && (\n                <WiDirectionRight size=\"24px\" />\n              )}\n              {wind.deg > 112.5 && wind.deg <= 157.5 && (\n                <WiDirectionDownRight size=\"24px\" />\n              )}\n              {wind.deg > 157.5 && wind.deg <= 202.5 && (\n                <WiDirectionDown size=\"24px\" />\n              )}\n              {wind.deg > 202.5 && wind.deg <= 247.5 && (\n                <WiDirectionDownLeft size=\"24px\" />\n              )}\n              {wind.deg > 247.5 && wind.deg <= 292.5 && (\n                <WiDirectionLeft size=\"24px\" />\n              )}\n              {wind.deg > 292.5 && wind.deg <= 337.5 && (\n                <WiDirectionUpLeft size=\"24px\" />\n              )}\n            </Card.Text>\n            <Card.Text>\n              <WiBarometer size=\"24px\" /> {main.pressure}hPa\n            </Card.Text>\n            <Card.Text>\n              <WiHumidity size=\"24px\" /> {main.humidity}%\n            </Card.Text>\n            <Card.Text>\n              <WiCloudy size=\"24px\" /> {clouds.all}%\n            </Card.Text>\n          </Card>\n        </Stack>\n      </Card>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  width: 50%;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Wrapper } from './ForecastWeather.styled';\nimport { IForecast } from '../../types/weather';\nimport { format } from 'date-fns';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface IInfo {\n  labels: string[];\n  datasets: [\n    {\n      label: string;\n      data: string[];\n      borderColor: string;\n      backgroundColor: string;\n    }\n  ];\n}\n\ninterface IProps {\n  data: IForecast;\n}\n\nexport const ForecastWeather: React.FC<IProps> = ({ data }) => {\n  const [info, setInfo] = useState<IInfo>({\n    labels: [],\n    datasets: [\n      {\n        label: 'daily temp',\n        data: [],\n        borderColor: 'rgb(53, 162, 235)',\n        backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      },\n    ],\n  });\n\n  useEffect(() => {\n    const labelsArray = data.list.map(el => {\n      const date = format(new Date(el.dt * 1000), 'd LLL h a');\n      return date;\n    });\n    const dataArray = data.list.map(el => {\n      return el.main.temp.toString();\n    });\n\n    setInfo({\n      labels: labelsArray,\n      datasets: [\n        {\n          label: 'temperature',\n          data: dataArray,\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n        },\n      ],\n    });\n  }, [data]);\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: '3 hour forecast for a 5 days',\n      },\n    },\n  };\n\n  return (\n    <Wrapper>\n      <Line options={options} data={info} />\n    </Wrapper>\n  );\n};\n","import React, { useState } from 'react';\nimport { Form, Button, Stack, Container, Spinner } from 'react-bootstrap';\nimport { getCurrentWeather } from '../../services/weatherApi';\nimport { IResponse } from '../../types/weather';\nimport { CurrentWeather } from './CurrentWeather';\nimport { ForecastWeather } from './ForecastWeather';\nimport { toast } from 'react-toastify';\n\ninterface FormElements extends HTMLFormControlsCollection {\n  city: HTMLInputElement;\n}\nconst Weather: React.FC = () => {\n  const [data, setData] = useState<IResponse>();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const onSubmitHandler = async (e: React.FormEvent) => {\n    e.preventDefault();\n    const cityName = (\n      (e.target as HTMLFormElement).elements as FormElements\n    ).city.value.trim();\n    if (!cityName) {\n      toast.error('It is necessary to fill the input field');\n      return;\n    }\n    setLoading(true);\n    setData(undefined);\n    try {\n      const res = await getCurrentWeather(cityName);\n      if (typeof res !== 'object') {\n        throw new Error(res);\n      }\n      setLoading(false);\n      setData(res);\n      toast.success(\n        `Selected city is ${res.currentWeather.name}, ${res.currentWeather.sys.country}`\n      );\n    } catch (error: any) {\n      toast.error(error.message);\n      setLoading(false);\n      return;\n    }\n  };\n  return (\n    <Container>\n      <section>\n        <div className=\"mb-4 d-flex flex-column align-items-center\">\n          <Form onSubmit={onSubmitHandler}>\n            <Stack className=\"p-3\" direction=\"horizontal\" gap={3}>\n              <Form.Control\n                type=\"text\"\n                name=\"city\"\n                placeholder=\"Enter your city\"\n              />\n              <Button\n                className=\"d-flex flex-row align-items-center\"\n                type=\"submit\"\n                variant=\"dark\"\n              >\n                Search\n                {loading && (\n                  <Spinner\n                    className=\"ms-1\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                  >\n                    <span className=\"visually-hidden\">Loading...</span>\n                  </Spinner>\n                )}\n              </Button>\n            </Stack>\n          </Form>\n        </div>\n        {loading && (\n          <Container className=\"d-flex justify-content-center mt-5\">\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </Spinner>\n          </Container>\n        )}\n        {data && (\n          <Stack direction=\"horizontal\" gap={3}>\n            <CurrentWeather data={data.currentWeather} />\n            <ForecastWeather data={data.forecastWeather} />\n          </Stack>\n        )}\n      </section>\n    </Container>\n  );\n};\n\nexport default Weather;\n"],"names":["getCurrentWeather","city","searchCityParams","URLSearchParams","appid","q","CITY_URL","axios","res","data","length","Error","location","lat","toString","lon","searchWeatherParams","units","WEATHER_URL","currentData","currentWeather","FORECAST_URL","forecastData","forecastWeather","message","Temp","styled","CurrentWeather","useState","date","setDate","name","sys","weather","main","wind","clouds","dt","useEffect","currentDate","Date","toLocaleTimeString","Card","bg","className","Stack","direction","gap","border","country","temp","src","icon","alt","description","text","feels_like","size","speed","deg","pressure","humidity","all","Wrapper","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ForecastWeather","labels","datasets","label","borderColor","backgroundColor","info","setInfo","labelsArray","list","map","el","format","dataArray","options","responsive","plugins","legend","position","title","display","setData","loading","setLoading","onSubmitHandler","e","preventDefault","cityName","target","elements","value","trim","toast","undefined","Container","Form","onSubmit","type","placeholder","Button","variant","Spinner","animation","role"],"sourceRoot":""}